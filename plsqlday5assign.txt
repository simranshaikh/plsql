1)   •	Create a package named MANAGE_EMP_PACK that has two public procedures, two package level variables and a private function. The public procedure HIRE_EMP adds an employee record in EMPLOYEES table and the public procedure FIRE_EMP deletes an employee record from the EMPLOYEES table. The two variables v_insert_cnt and v_delete_cnt are used in the package, for keeping record of the numbers of times insert / delete has been executed. 
Create a private function VALIDATE_EMP in the package to validate employee number. This function can be called from HIRE_EMP and FIRE_EMP.
•	The function VALIDATE_EMP accepts an employee number in a parameter p_eno and returns TRUE if the value of employee number exists in the EMPLOYEES table else it returns FALSE.
•	The procedure HIRE_EMP takes all the column values of the EMPLOYEES table as parameters. It gives a call to VALIDATE_EMP by passing on the value of employee number and if the function returns TRUE then it displays message ‘Employee number already in use’. If the function returns FALSE then it inserts a new record in the EMPLOYEES table and displays a message ‘One employee added’. It also increments the value of v_insert_cnt by 1.
•	The procedure FIRE_EMP accepts an employee number as a parameter and gives a call to VALIDATE_EMP by passing on the value of employee number. If the function returns TRUE then it deletes the corresponding record from the EMPLOYEES table, displays message ‘One employee deleted’ and increments the value of v_delete_cnt by 1. If the function returns FALSE then it displays message ‘Wrong employee number’.
•	Check working of the methods in MANAGE_EMP_PACK by giving calls to the public procedures and by displaying value of the appropriate package variable, through an anonymous block 

-------------->
hire_emp procedure adds  (takes all col values as parameters)
fire_emp ---'' ---- deletes 
v_insert_cnt
v_delete_cnt
validate_emp private func p_eno --> to validate emp no
-----------

create or replace package manage_emp_pack as
v_insert_cnt number:=0;
v_delete_cnt number:=0;
procedure hire_emp(p_empno emp.empno%type,p_name emp.ename%type,p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate%type,p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type);
procedure fire_emp(p_empno emp.empno%type);
function validate_emp(p_empno emp.empno%type) return boolean;
end;
/



create or replace package body manage_emp_pack  as

procedure hire_emp(p_empno emp.empno%type,p_name emp.ename%type,p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate%type,p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type) as
begin



end;


procedure fire_emp(p_empno emp.empno%type) as
begin



end;


function validate_emp(p_empno emp.empno%type) return boolean as
begin
select empno into p_empno from emp where empno=p_empno;
exception
when no_data_found then





end;



select ename into v_ename from emp where empno=p_empno;
dbms_output.put_line('from getempinfo proc ename ='||v_ename);
exception
when no_data_found then
dbms_output.put_line('empno is invalid');
end;






2)  •	Create a package named MY_EMP_PACK having two overloaded functions named GET_AVG_SAL. The first function accepts first name as a parameter while the second function accepts employee_id as a parameter and both return the average salary paid in the department to which the employee belongs.  Both the functions should handle the exception for non-existing employee by displaying an appropriate error message.
•	Give a call to GET_AVG_SAL through an anonymous PL/SQL block by passing on employee number 204. Do the same again by passing on employee name ‘Valli’.




create or replace package my_emp_pack as 
function get_avg_sal(p_ename emp.ename%type) return number;
function get_avg_sal(p_empno emp.empno%type) return number;

create or replace package body my_emp_pack as
function get_avg_sal(p_ename emp.ename%type) return number as
avg_sal number;
begin
dbms_output.put_line('hello');
end;

function get_avg_sal(p_empno emp.empno%type) return number as
avg_salary number;
begin

select avg(sal) into avg_salary from emp where deptno=20;

end;
end;


declare
res number;
begin
res:=my_emp_pack.get_avg_sal;
dbms_output.put_line('avg'||res);
end;
/
